// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.Extensions.DependencyInjection;
using NexusMods.DataModel.Abstractions;
using NexusMods.DataModel.Loadouts;
using NexusMods.DataModel.Loadouts.ModFiles;
using NexusMods.Hashing.xxHash64;
using NexusMods.Interfaces;
using NexusMods.Paths;
using NexusMods.DataModel.ArchiveContents;
using NexusMods.FileExtractor.FileSignatures;

public class NexusMods_DataModel_Abstractions_EntityConverter : JsonConverter<NexusMods.DataModel.Abstractions.Entity> {
  public static void ConfigureServices(IServiceCollection services) {
    services.AddSingleton<JsonConverter, NexusMods_DataModel_Loadouts_ListRegistryConverter>();
    services.AddSingleton<JsonConverter, NexusMods_DataModel_Loadouts_ModConverter>();
    services.AddSingleton<JsonConverter, NexusMods_DataModel_Loadouts_LoadoutConverter>();
    services.AddSingleton<JsonConverter, NexusMods_DataModel_Loadouts_ModFiles_FromArchiveConverter>();
    services.AddSingleton<JsonConverter, NexusMods_DataModel_Loadouts_ModFiles_GameFileConverter>();
    services.AddSingleton<JsonConverter, NexusMods_DataModel_ArchiveContents_AnalyzedFileConverter>();
    services.AddSingleton<JsonConverter, NexusMods_DataModel_ArchiveContents_AnalyzedArchiveConverter>();
    services.AddSingleton<JsonConverter, NexusMods_DataModel_ArchiveContents_FileContainedInConverter>();
    services.AddSingleton<JsonConverter, NexusMods_DataModel_Abstractions_EntityConverter>();
  }
  public override NexusMods.DataModel.Abstractions.Entity Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
    var cReader = reader;
    if (reader.TokenType != JsonTokenType.StartObject)
      throw new JsonException();
    cReader.Read();
    if (cReader.GetString() != "$type")
      throw new JsonException();
    cReader.Read();
    var type = cReader.GetString();
    switch(type) {
      case "NexusMods.DataModel.ListRegistry":
        return JsonSerializer.Deserialize<Mod>(ref reader, options)!;
      case "NexusMods.DataModel.Loadout":
        return JsonSerializer.Deserialize<Loadout>(ref reader, options)!;
      case "NexusMods.DataModel.GameFiles.FromArchive":
        return JsonSerializer.Deserialize<FromArchive>(ref reader, options)!;
      case "NexusMods.DataModel.ModFiles.GameFile":
        return JsonSerializer.Deserialize<GameFile>(ref reader, options)!;
      case "AnalyzedFile":
        return JsonSerializer.Deserialize<AnalyzedFile>(ref reader, options)!;
      case "AnalyzedArchive":
        return JsonSerializer.Deserialize<AnalyzedArchive>(ref reader, options)!;
      case "FileContainedIn":
        return JsonSerializer.Deserialize<FileContainedIn>(ref reader, options)!;
      default:
        throw new JsonException($"No Type dispatch for {type}");
    }
  }
  public override void Write(Utf8JsonWriter writer, NexusMods.DataModel.Abstractions.Entity value, JsonSerializerOptions options) {
    switch (value) {
      case NexusMods.DataModel.Loadouts.ModFiles.FromArchive v0:
        JsonSerializer.Serialize(writer, v0, options);
         return;
      case NexusMods.DataModel.Loadouts.ModFiles.GameFile v1:
        JsonSerializer.Serialize(writer, v1, options);
         return;
      case NexusMods.DataModel.ArchiveContents.AnalyzedArchive v2:
        JsonSerializer.Serialize(writer, v2, options);
         return;
      case NexusMods.DataModel.Loadouts.ListRegistry v3:
        JsonSerializer.Serialize(writer, v3, options);
         return;
      case NexusMods.DataModel.Loadouts.Mod v4:
        JsonSerializer.Serialize(writer, v4, options);
         return;
      case NexusMods.DataModel.Loadouts.Loadout v5:
        JsonSerializer.Serialize(writer, v5, options);
         return;
      case NexusMods.DataModel.ArchiveContents.AnalyzedFile v6:
        JsonSerializer.Serialize(writer, v6, options);
         return;
      case NexusMods.DataModel.ArchiveContents.FileContainedIn v7:
        JsonSerializer.Serialize(writer, v7, options);
         return;
    }
  }
}
public class NexusMods_DataModel_ArchiveContents_AnalyzedArchiveConverter : JsonConverter<NexusMods.DataModel.ArchiveContents.AnalyzedArchive> {
  private readonly Lazy<IDataStore> _store;
  public NexusMods_DataModel_ArchiveContents_AnalyzedArchiveConverter(IServiceProvider provider) {
    _store = new Lazy<IDataStore>(provider.GetRequiredService<IDataStore>);
  }
  public override NexusMods.DataModel.ArchiveContents.AnalyzedArchive Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
    if (reader.TokenType != JsonTokenType.StartObject)
      throw new JsonException();
    EntityDictionary<RelativePath,AnalyzedFile> contentsProp = default;
    FileType[] filetypesProp = default;
    Hash hashProp = default;
    Size sizeProp = default;
    while (true) {
      reader.Read();
      if (reader.TokenType == JsonTokenType.EndObject) {
        reader.Read();
        break;
      }
      var prop = reader.GetString();
      reader.Read();
      switch (prop) {
        case "Contents":
          contentsProp = JsonSerializer.Deserialize<EntityDictionary<RelativePath,AnalyzedFile>>(ref reader, options);
          break;
        case "FileTypes":
          filetypesProp = JsonSerializer.Deserialize<FileType[]>(ref reader, options);
          break;
        case "Hash":
          hashProp = JsonSerializer.Deserialize<Hash>(ref reader, options);
          break;
        case "Size":
          sizeProp = JsonSerializer.Deserialize<Size>(ref reader, options);
          break;
        default:
          reader.Skip();
          break;
      }
    }
    return new NexusMods.DataModel.ArchiveContents.AnalyzedArchive {
      Contents = contentsProp,
      FileTypes = filetypesProp,
      Hash = hashProp,
      Size = sizeProp,
      Store = _store.Value
      };
    }
    public override void Write(Utf8JsonWriter writer, NexusMods.DataModel.ArchiveContents.AnalyzedArchive value, JsonSerializerOptions options) {
      writer.WriteStartObject();
      writer.WriteString("$type", "AnalyzedArchive");
      writer.WritePropertyName("Contents");
      JsonSerializer.Serialize<EntityDictionary<RelativePath,AnalyzedFile>>(writer, value.Contents, options);
      writer.WritePropertyName("FileTypes");
      JsonSerializer.Serialize<FileType[]>(writer, value.FileTypes, options);
      writer.WritePropertyName("Hash");
      JsonSerializer.Serialize<Hash>(writer, value.Hash, options);
      writer.WritePropertyName("Size");
      JsonSerializer.Serialize<Size>(writer, value.Size, options);
      writer.WriteEndObject();
    }
  }
  public class NexusMods_DataModel_ArchiveContents_AnalyzedFileConverter : JsonConverter<NexusMods.DataModel.ArchiveContents.AnalyzedFile> {
    private readonly Lazy<IDataStore> _store;
    public NexusMods_DataModel_ArchiveContents_AnalyzedFileConverter(IServiceProvider provider) {
      _store = new Lazy<IDataStore>(provider.GetRequiredService<IDataStore>);
    }
    public override NexusMods.DataModel.ArchiveContents.AnalyzedFile Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
      if (reader.TokenType != JsonTokenType.StartObject)
        throw new JsonException();
      FileType[] filetypesProp = default;
      Hash hashProp = default;
      Size sizeProp = default;
      while (true) {
        reader.Read();
        if (reader.TokenType == JsonTokenType.EndObject) {
          reader.Read();
          break;
        }
        var prop = reader.GetString();
        reader.Read();
        switch (prop) {
          case "FileTypes":
            filetypesProp = JsonSerializer.Deserialize<FileType[]>(ref reader, options);
            break;
          case "Hash":
            hashProp = JsonSerializer.Deserialize<Hash>(ref reader, options);
            break;
          case "Size":
            sizeProp = JsonSerializer.Deserialize<Size>(ref reader, options);
            break;
          default:
            reader.Skip();
            break;
        }
      }
      return new NexusMods.DataModel.ArchiveContents.AnalyzedFile {
        FileTypes = filetypesProp,
        Hash = hashProp,
        Size = sizeProp,
        Store = _store.Value
        };
      }
      public override void Write(Utf8JsonWriter writer, NexusMods.DataModel.ArchiveContents.AnalyzedFile value, JsonSerializerOptions options) {
        writer.WriteStartObject();
        writer.WriteString("$type", "AnalyzedFile");
        writer.WritePropertyName("FileTypes");
        JsonSerializer.Serialize<FileType[]>(writer, value.FileTypes, options);
        writer.WritePropertyName("Hash");
        JsonSerializer.Serialize<Hash>(writer, value.Hash, options);
        writer.WritePropertyName("Size");
        JsonSerializer.Serialize<Size>(writer, value.Size, options);
        writer.WriteEndObject();
      }
    }
    public class NexusMods_DataModel_ArchiveContents_FileContainedInConverter : JsonConverter<NexusMods.DataModel.ArchiveContents.FileContainedIn> {
      private readonly Lazy<IDataStore> _store;
      public NexusMods_DataModel_ArchiveContents_FileContainedInConverter(IServiceProvider provider) {
        _store = new Lazy<IDataStore>(provider.GetRequiredService<IDataStore>);
      }
      public override NexusMods.DataModel.ArchiveContents.FileContainedIn Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
        if (reader.TokenType != JsonTokenType.StartObject)
          throw new JsonException();
        Hash fileProp = default;
        Hash parentProp = default;
        RelativePath pathProp = default;
        while (true) {
          reader.Read();
          if (reader.TokenType == JsonTokenType.EndObject) {
            reader.Read();
            break;
          }
          var prop = reader.GetString();
          reader.Read();
          switch (prop) {
            case "File":
              fileProp = JsonSerializer.Deserialize<Hash>(ref reader, options);
              break;
            case "Parent":
              parentProp = JsonSerializer.Deserialize<Hash>(ref reader, options);
              break;
            case "Path":
              pathProp = JsonSerializer.Deserialize<RelativePath>(ref reader, options);
              break;
            default:
              reader.Skip();
              break;
          }
        }
        return new NexusMods.DataModel.ArchiveContents.FileContainedIn {
          File = fileProp,
          Parent = parentProp,
          Path = pathProp,
          Store = _store.Value
          };
        }
        public override void Write(Utf8JsonWriter writer, NexusMods.DataModel.ArchiveContents.FileContainedIn value, JsonSerializerOptions options) {
          writer.WriteStartObject();
          writer.WriteString("$type", "FileContainedIn");
          writer.WritePropertyName("File");
          JsonSerializer.Serialize<Hash>(writer, value.File, options);
          writer.WritePropertyName("Parent");
          JsonSerializer.Serialize<Hash>(writer, value.Parent, options);
          writer.WritePropertyName("Path");
          JsonSerializer.Serialize<RelativePath>(writer, value.Path, options);
          writer.WriteEndObject();
        }
      }
      public class NexusMods_DataModel_Loadouts_ListRegistryConverter : JsonConverter<NexusMods.DataModel.Loadouts.ListRegistry> {
        private readonly Lazy<IDataStore> _store;
        public NexusMods_DataModel_Loadouts_ListRegistryConverter(IServiceProvider provider) {
          _store = new Lazy<IDataStore>(provider.GetRequiredService<IDataStore>);
        }
        public override NexusMods.DataModel.Loadouts.ListRegistry Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
          if (reader.TokenType != JsonTokenType.StartObject)
            throw new JsonException();
          EntityDictionary<LoadoutId,Loadout> listsProp = default;
          while (true) {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject) {
              reader.Read();
              break;
            }
            var prop = reader.GetString();
            reader.Read();
            switch (prop) {
              case "Lists":
                listsProp = JsonSerializer.Deserialize<EntityDictionary<LoadoutId,Loadout>>(ref reader, options);
                break;
              default:
                reader.Skip();
                break;
            }
          }
          return new NexusMods.DataModel.Loadouts.ListRegistry {
            Lists = listsProp,
            Store = _store.Value
            };
          }
          public override void Write(Utf8JsonWriter writer, NexusMods.DataModel.Loadouts.ListRegistry value, JsonSerializerOptions options) {
            writer.WriteStartObject();
            writer.WriteString("$type", "NexusMods.DataModel.ListRegistry");
            writer.WritePropertyName("Lists");
            JsonSerializer.Serialize<EntityDictionary<LoadoutId,Loadout>>(writer, value.Lists, options);
            writer.WriteEndObject();
          }
        }
        public class NexusMods_DataModel_Loadouts_LoadoutConverter : JsonConverter<NexusMods.DataModel.Loadouts.Loadout> {
          private readonly Lazy<IDataStore> _store;
          public NexusMods_DataModel_Loadouts_LoadoutConverter(IServiceProvider provider) {
            _store = new Lazy<IDataStore>(provider.GetRequiredService<IDataStore>);
          }
          public override NexusMods.DataModel.Loadouts.Loadout Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
            if (reader.TokenType != JsonTokenType.StartObject)
              throw new JsonException();
            string changemessageProp = default;
            GameInstallation installationProp = default;
            DateTime lastmodifiedProp = default;
            LoadoutId loadoutidProp = default;
            EntityHashSet<Mod> modsProp = default;
            string nameProp = default;
            EntityLink<Loadout> previousversionProp = default;
            while (true) {
              reader.Read();
              if (reader.TokenType == JsonTokenType.EndObject) {
                reader.Read();
                break;
              }
              var prop = reader.GetString();
              reader.Read();
              switch (prop) {
                case "ChangeMessage":
                  changemessageProp = JsonSerializer.Deserialize<string>(ref reader, options);
                  break;
                case "Installation":
                  installationProp = JsonSerializer.Deserialize<GameInstallation>(ref reader, options);
                  break;
                case "LastModified":
                  lastmodifiedProp = JsonSerializer.Deserialize<DateTime>(ref reader, options);
                  break;
                case "LoadoutId":
                  loadoutidProp = JsonSerializer.Deserialize<LoadoutId>(ref reader, options);
                  break;
                case "Mods":
                  modsProp = JsonSerializer.Deserialize<EntityHashSet<Mod>>(ref reader, options);
                  break;
                case "Name":
                  nameProp = JsonSerializer.Deserialize<string>(ref reader, options);
                  break;
                case "PreviousVersion":
                  previousversionProp = JsonSerializer.Deserialize<EntityLink<Loadout>>(ref reader, options);
                  break;
                default:
                  reader.Skip();
                  break;
              }
            }
            return new NexusMods.DataModel.Loadouts.Loadout {
              ChangeMessage = changemessageProp,
              Installation = installationProp,
              LastModified = lastmodifiedProp,
              LoadoutId = loadoutidProp,
              Mods = modsProp,
              Name = nameProp,
              PreviousVersion = previousversionProp,
              Store = _store.Value
              };
            }
            public override void Write(Utf8JsonWriter writer, NexusMods.DataModel.Loadouts.Loadout value, JsonSerializerOptions options) {
              writer.WriteStartObject();
              writer.WriteString("$type", "NexusMods.DataModel.Loadout");
              writer.WritePropertyName("ChangeMessage");
              JsonSerializer.Serialize<string>(writer, value.ChangeMessage, options);
              writer.WritePropertyName("Installation");
              JsonSerializer.Serialize<GameInstallation>(writer, value.Installation, options);
              writer.WritePropertyName("LastModified");
              JsonSerializer.Serialize<DateTime>(writer, value.LastModified, options);
              writer.WritePropertyName("LoadoutId");
              JsonSerializer.Serialize<LoadoutId>(writer, value.LoadoutId, options);
              writer.WritePropertyName("Mods");
              JsonSerializer.Serialize<EntityHashSet<Mod>>(writer, value.Mods, options);
              writer.WritePropertyName("Name");
              JsonSerializer.Serialize<string>(writer, value.Name, options);
              writer.WritePropertyName("PreviousVersion");
              JsonSerializer.Serialize<EntityLink<Loadout>>(writer, value.PreviousVersion, options);
              writer.WriteEndObject();
            }
          }
          public class NexusMods_DataModel_Loadouts_ModConverter : JsonConverter<NexusMods.DataModel.Loadouts.Mod> {
            private readonly Lazy<IDataStore> _store;
            public NexusMods_DataModel_Loadouts_ModConverter(IServiceProvider provider) {
              _store = new Lazy<IDataStore>(provider.GetRequiredService<IDataStore>);
            }
            public override NexusMods.DataModel.Loadouts.Mod Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
              if (reader.TokenType != JsonTokenType.StartObject)
                throw new JsonException();
              EntityHashSet<AModFile> filesProp = default;
              string nameProp = default;
              while (true) {
                reader.Read();
                if (reader.TokenType == JsonTokenType.EndObject) {
                  reader.Read();
                  break;
                }
                var prop = reader.GetString();
                reader.Read();
                switch (prop) {
                  case "Files":
                    filesProp = JsonSerializer.Deserialize<EntityHashSet<AModFile>>(ref reader, options);
                    break;
                  case "Name":
                    nameProp = JsonSerializer.Deserialize<string>(ref reader, options);
                    break;
                  default:
                    reader.Skip();
                    break;
                }
              }
              return new NexusMods.DataModel.Loadouts.Mod {
                Files = filesProp,
                Name = nameProp,
                Store = _store.Value
                };
              }
              public override void Write(Utf8JsonWriter writer, NexusMods.DataModel.Loadouts.Mod value, JsonSerializerOptions options) {
                writer.WriteStartObject();
                writer.WriteString("$type", "NexusMods.DataModel.ListRegistry");
                writer.WritePropertyName("Files");
                JsonSerializer.Serialize<EntityHashSet<AModFile>>(writer, value.Files, options);
                writer.WritePropertyName("Name");
                JsonSerializer.Serialize<string>(writer, value.Name, options);
                writer.WriteEndObject();
              }
            }
            public class NexusMods_DataModel_Loadouts_ModFiles_FromArchiveConverter : JsonConverter<NexusMods.DataModel.Loadouts.ModFiles.FromArchive> {
              private readonly Lazy<IDataStore> _store;
              public NexusMods_DataModel_Loadouts_ModFiles_FromArchiveConverter(IServiceProvider provider) {
                _store = new Lazy<IDataStore>(provider.GetRequiredService<IDataStore>);
              }
              public override NexusMods.DataModel.Loadouts.ModFiles.FromArchive Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
                if (reader.TokenType != JsonTokenType.StartObject)
                  throw new JsonException();
                HashRelativePath fromProp = default;
                Hash hashProp = default;
                Size sizeProp = default;
                GamePath toProp = default;
                while (true) {
                  reader.Read();
                  if (reader.TokenType == JsonTokenType.EndObject) {
                    reader.Read();
                    break;
                  }
                  var prop = reader.GetString();
                  reader.Read();
                  switch (prop) {
                    case "From":
                      fromProp = JsonSerializer.Deserialize<HashRelativePath>(ref reader, options);
                      break;
                    case "Hash":
                      hashProp = JsonSerializer.Deserialize<Hash>(ref reader, options);
                      break;
                    case "Size":
                      sizeProp = JsonSerializer.Deserialize<Size>(ref reader, options);
                      break;
                    case "To":
                      toProp = JsonSerializer.Deserialize<GamePath>(ref reader, options);
                      break;
                    default:
                      reader.Skip();
                      break;
                  }
                }
                return new NexusMods.DataModel.Loadouts.ModFiles.FromArchive {
                  From = fromProp,
                  Hash = hashProp,
                  Size = sizeProp,
                  To = toProp,
                  Store = _store.Value
                  };
                }
                public override void Write(Utf8JsonWriter writer, NexusMods.DataModel.Loadouts.ModFiles.FromArchive value, JsonSerializerOptions options) {
                  writer.WriteStartObject();
                  writer.WriteString("$type", "NexusMods.DataModel.GameFiles.FromArchive");
                  writer.WritePropertyName("From");
                  JsonSerializer.Serialize<HashRelativePath>(writer, value.From, options);
                  writer.WritePropertyName("Hash");
                  JsonSerializer.Serialize<Hash>(writer, value.Hash, options);
                  writer.WritePropertyName("Size");
                  JsonSerializer.Serialize<Size>(writer, value.Size, options);
                  writer.WritePropertyName("To");
                  JsonSerializer.Serialize<GamePath>(writer, value.To, options);
                  writer.WriteEndObject();
                }
              }
              public class NexusMods_DataModel_Loadouts_ModFiles_GameFileConverter : JsonConverter<NexusMods.DataModel.Loadouts.ModFiles.GameFile> {
                private readonly Lazy<IDataStore> _store;
                public NexusMods_DataModel_Loadouts_ModFiles_GameFileConverter(IServiceProvider provider) {
                  _store = new Lazy<IDataStore>(provider.GetRequiredService<IDataStore>);
                }
                public override NexusMods.DataModel.Loadouts.ModFiles.GameFile Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
                  if (reader.TokenType != JsonTokenType.StartObject)
                    throw new JsonException();
                  Hash hashProp = default;
                  GameInstallation installationProp = default;
                  Size sizeProp = default;
                  GamePath toProp = default;
                  while (true) {
                    reader.Read();
                    if (reader.TokenType == JsonTokenType.EndObject) {
                      reader.Read();
                      break;
                    }
                    var prop = reader.GetString();
                    reader.Read();
                    switch (prop) {
                      case "Hash":
                        hashProp = JsonSerializer.Deserialize<Hash>(ref reader, options);
                        break;
                      case "Installation":
                        installationProp = JsonSerializer.Deserialize<GameInstallation>(ref reader, options);
                        break;
                      case "Size":
                        sizeProp = JsonSerializer.Deserialize<Size>(ref reader, options);
                        break;
                      case "To":
                        toProp = JsonSerializer.Deserialize<GamePath>(ref reader, options);
                        break;
                      default:
                        reader.Skip();
                        break;
                    }
                  }
                  return new NexusMods.DataModel.Loadouts.ModFiles.GameFile {
                    Hash = hashProp,
                    Installation = installationProp,
                    Size = sizeProp,
                    To = toProp,
                    Store = _store.Value
                    };
                  }
                  public override void Write(Utf8JsonWriter writer, NexusMods.DataModel.Loadouts.ModFiles.GameFile value, JsonSerializerOptions options) {
                    writer.WriteStartObject();
                    writer.WriteString("$type", "NexusMods.DataModel.ModFiles.GameFile");
                    writer.WritePropertyName("Hash");
                    JsonSerializer.Serialize<Hash>(writer, value.Hash, options);
                    writer.WritePropertyName("Installation");
                    JsonSerializer.Serialize<GameInstallation>(writer, value.Installation, options);
                    writer.WritePropertyName("Size");
                    JsonSerializer.Serialize<Size>(writer, value.Size, options);
                    writer.WritePropertyName("To");
                    JsonSerializer.Serialize<GamePath>(writer, value.To, options);
                    writer.WriteEndObject();
                  }
                }
