using NexusMods.FileExtractor.FileSignatures;
using NexusMods.Hashing.xxHash64;
using NexusMods.Paths;

namespace NexusMods.DataModel.Loadouts;

/// <summary>
/// Represents a mod file that is generated by some source, instead of being a file from an archive.
/// </summary>
public abstract record class AGeneratedFile : AModFile
{
    /// <summary>
    /// Maintained by the datamodel, set to the hash of the generated file.
    /// </summary>
    public required Hash CachedHash { get; init; } = Hash.Zero;
    
    /// <summary>
    /// Maintained by the datamodel, set to the size of the generated file.
    /// </summary>
    public required Size CachedSize { get; init; } = Size.Zero;
    
    /// <summary>
    /// Generate the contents of the file, writing it to the given stream.
    /// </summary>
    /// <param name="stream"></param>
    /// <param name="loadout"></param>
    /// <param name="flattenedList"></param>
    /// <param name="ct"></param>
    /// <returns></returns>
    public abstract Task GenerateAsync(Stream stream, Loadout loadout, IReadOnlyCollection<(AModFile File, Mod Mod)> flattenedList, CancellationToken ct = default);
    
    public abstract Task<(Size Size, Hash Hash)> GetMetaData(Loadout loadout, IReadOnlyCollection<(AModFile File, Mod Mod)> flattenedList, CancellationToken ct = default);
    
    
}