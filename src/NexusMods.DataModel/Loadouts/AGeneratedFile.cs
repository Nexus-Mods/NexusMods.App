using NexusMods.DataModel.Games;
using NexusMods.DataModel.Loadouts.ModFiles;
using NexusMods.Hashing.xxHash64;
using NexusMods.Paths;

namespace NexusMods.DataModel.Loadouts;

/// <summary>
/// Represents a mod file that is generated by some source,
/// instead of being a file from an archive.
/// </summary>
///
/// <remarks>
///    These files are currently [at time of writing] registered using the <see cref="AGame.GetGameFiles"/> method.
///    There might be more hook-ins in the future.
/// </remarks>
public abstract record AGeneratedFile : AStaticModFile
{
    /// <summary>
    /// Generate the contents of the file, writing it to the given stream.
    /// </summary>
    /// <param name="stream">The stream to which the data is written to.</param>
    /// <param name="loadout">Loadout associated with this file, if required for fetching any metadata.</param>
    /// <param name="flattenedList">
    ///     Contains all files with their corresponding mods.
    ///     This collection does contain duplicates, i.e. for each file path only 1
    ///     mod file will be present.
    /// </param>
    /// <param name="ct">Cancel this action if desired.</param>
    public abstract Task GenerateAsync(Stream stream, Loadout loadout, IReadOnlyCollection<(AModFile File, Mod Mod)> flattenedList, CancellationToken ct = default);

    /// <summary>
    /// Return metadata for the given file.
    /// </summary>
    /// <param name="loadout">The mod loadout for which the metadata is to be fetched.</param>
    /// <param name="flattenedList">
    ///     Contains all files with their corresponding mods.
    ///     This collection does contain duplicates, i.e. for each file path only 1
    ///     mod file will be present.
    /// </param>
    /// <param name="ct">Allows you to cancel the operation.</param>
    /// <returns></returns>
    public abstract Task<(Size Size, Hash Hash)> GetMetadataAsync(Loadout loadout, IReadOnlyCollection<(AModFile File, Mod Mod)> flattenedList, CancellationToken ct = default);
}
