<reactive:ReactiveUserControl
    x:TypeArguments="local:IDiagnosticListViewModel"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:reactive="http://reactiveui.net"
    xmlns:local="clr-namespace:NexusMods.App.UI.Pages.Diagnostics"
    xmlns:controls="clr-namespace:NexusMods.App.UI.Controls"
    xmlns:icons="clr-namespace:NexusMods.Icons;assembly=NexusMods.Icons"
    xmlns:resources="clr-namespace:NexusMods.App.UI.Resources"
    xmlns:diagnostics="clr-namespace:NexusMods.App.UI.Controls.Diagnostics"
    mc:Ignorable="d" d:DesignWidth="900" d:DesignHeight="500"
    x:Class="NexusMods.App.UI.Pages.Diagnostics.DiagnosticListView">

    <!-- TODO: anymore work on this and it should be moved to a separate style file -->

    <reactive:ReactiveUserControl.Resources>
        <ScrollViewer x:Key="TabContent">
            <ItemsControl x:Name="HealthCheckItemsControl">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Spacing="{StaticResource Spacing-2}" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <!-- Do not replace with ReactiveUI, the generated component and kills shadows -->
                <!-- due to enforced ClipToBounds that can't be overwritten by styles -->
                <ItemsControl.DataTemplates>
                    <DataTemplate DataType="{x:Type diagnostics:IDiagnosticEntryViewModel}">
                        <diagnostics:DiagnosticEntryView DataContext="{CompiledBinding .}" />
                    </DataTemplate>
                </ItemsControl.DataTemplates>
            </ItemsControl>
        </ScrollViewer>
    </reactive:ReactiveUserControl.Resources>


    <!-- NOTE(insomnious): Using a single column grid to limit the max width of the content while still letting it stretch.
        HorizontalAlignment is ignored on a control when numerical entries are set on 
        Width/Height/MaxWidth/MaxHeight etc.
        -->
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" MaxWidth="1024" />
        </Grid.ColumnDefinitions>

        <!-- need DockPanel to make the TabControl fill the available space, needed for ScrollViewer to calculate height properly -->
        <DockPanel Margin="24">

            <!-- header with pictogram -->
            <StackPanel Spacing="8" DockPanel.Dock="Top">

                <StackPanel Orientation="Horizontal" Spacing="8">
                    <Border Width="48" Height="48">
                        <icons:UnifiedIcon Size="48" Value="{x:Static icons:IconValues.PictogramHealth}" />
                    </Border>
                    <TextBlock Text="Health Check"
                               Theme="{StaticResource HeadingSMSemiTheme}"
                               Foreground="{StaticResource NeutralStrongBrush}"
                               VerticalAlignment="Center" />
                </StackPanel>

                <TextBlock
                    Text="Review your Loadout for any issues and learn how to resolve them if needed."
                    Theme="{StaticResource BodyMDNormalTheme}"
                    Foreground="{StaticResource NeutralStrongBrush}"
                    TextWrapping="Wrap" />
            </StackPanel>

            <controls:EmptyState x:Name="EmptyState"
                                 Icon="{x:Static icons:IconValues.CheckCircle}"
                                 Header="{x:Static resources:Language.DiagnosticListView_EmptyState_Header}"
                                 Subtitle="{x:Static resources:Language.DiagnosticListView_EmptyState_Subtitle}">

                <TabControl x:Name="TabControl"
                            Margin="0,24,0,0"
                            Padding="0,24,0,0"
                            Classes="Subtabs">
                    <TabItem x:Name="AllTab" Header="AllTab" Content="{StaticResource TabContent}" />
                    <TabItem x:Name="SuggestionTab" Header="SuggestionTab" Content="{StaticResource TabContent}" />
                    <TabItem x:Name="WarningTab" Header="WarningTab" Content="{StaticResource TabContent}" />
                    <TabItem x:Name="CriticalTab" Header="CriticalTab" Content="{StaticResource TabContent}" />
                </TabControl>
            </controls:EmptyState>

        </DockPanel>
    </Grid>


</reactive:ReactiveUserControl>
