<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:icons="clr-namespace:NexusMods.Icons;assembly=NexusMods.Icons"
        xmlns:sorting="clr-namespace:NexusMods.App.UI.Pages.Sorting;assembly=NexusMods.App.UI">

    <Design.PreviewWith>
        <Border Width="800" Height="600">
            <sorting:LoadOrderView>
                <sorting:LoadOrderView.DataContext>
                    <sorting:LoadOrderDesignViewModel />
                </sorting:LoadOrderView.DataContext>
            </sorting:LoadOrderView>
        </Border>
    </Design.PreviewWith>


    <Styles.Resources>
        <!-- this template is solely used for the load order index column which can't use built in sort functionality
        as it is disabled when drag and drop is enabled. This is the same template as our default 
        TreeDataGridColumnHeader one with the only change being the addition of a button to switch the sort direction 
        while mimicking the default header styles -->
        <ControlTemplate x:Key="LoadOrderIndexTreeDataGridColumnHeaderTemplate"
                         TargetType="TreeDataGridColumnHeader"
                         x:DataType="sorting:ILoadOrderViewModel">
            <Border Name="DataGridBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                <!-- added button so we can fake a column header click-->
                <Button x:Name="FakeSortButton"
                        Command="{CompiledBinding SwitchSortDirectionCommand }"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch">
                    <DockPanel Name="DataGridDockPanel" VerticalAlignment="Stretch">
                        <Panel DockPanel.Dock="Right"
                               TabIndex="2"
                               IsVisible="False">
                            <Rectangle Fill="{StaticResource TreeDataGridGridLinesBrush}"
                                       HorizontalAlignment="Center"
                                       Width="1"
                                       Height="24"
                                       Margin="0,0,0,0" />
                            <!-- negative margin to bump the vertical line to the right -->
                            <Thumb Name="PART_Resizer"
                                   DockPanel.Dock="Right"
                                   Background="Transparent"
                                   Cursor="SizeWestEast"
                                   IsVisible="{TemplateBinding CanUserResize}"
                                   Width="5">
                                <Thumb.Template>
                                    <ControlTemplate>
                                        <Border Background="{TemplateBinding Background}"
                                                VerticalAlignment="Stretch" />
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </Panel>
                        <Border Padding="{TemplateBinding Padding}">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter Name="PART_ContentPresenter"
                                                  Content="{TemplateBinding Header}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  TabIndex="0">
                                    <ContentPresenter.DataTemplates>
                                        <DataTemplate DataType="x:String">
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="{Binding}" TextTrimming="CharacterEllipsis" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </ContentPresenter.DataTemplates>
                                </ContentPresenter>
                                <Border
                                    Padding="0,0,0,0"
                                    Background="Transparent"
                                    Height="20"
                                    Width="20"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    TabIndex="1">
                                    <icons:UnifiedIcon Name="SortIcon"
                                                       Foreground="{TemplateBinding Foreground}"
                                                       Value="{x:Null}"
                                                       Classes.IsAscending="{CompiledBinding IsAscending}" />
                                </Border>
                            </StackPanel>
                        </Border>
                    </DockPanel>
                </Button>
            </Border>
        </ControlTemplate>
    </Styles.Resources>

    <!-- SORT \ LOAD ORDER TREEDATAGRID -->

    <Style Selector="TreeDataGrid#SortOrderTreeDataGrid">

        <!-- main background -->
        <Setter Property="Background" Value="{x:Null}" />

        <!-- header background -->
        <Style Selector="^ /template/ Border#ColumnHeadersPresenterBorder">
            <Setter Property="Background" Value="{StaticResource SurfaceTransparentBrush}" />
            <Setter Property="BorderThickness" Value="0" />
            <!-- 4px left and right to line up header with rows below -->
            <Setter Property="Padding" Value="4,0" />
        </Style>

        <Style Selector="^ /template/ TreeDataGridRowsPresenter#PART_RowsPresenter">
            <!-- 4px left and right to account for rows needing to show shadows -->
            <Setter Property="Margin" Value="4,0,8,0" />
        </Style>

        <Style Selector="^ TreeDataGridColumnHeader">

            <!-- Index column header -->
            <!-- TODO: change this selector to always get the index column even if it isn't the first one -->
            <Style Selector="^:nth-child(1)">
                <!-- reset padding -->
                <Setter Property="Padding" Value="8,0,0,0" />
                <Setter Property="Template" Value="{DynamicResource LoadOrderIndexTreeDataGridColumnHeaderTemplate}" />

                <Style Selector="^ icons|UnifiedIcon#SortIcon.IsAscending">
                    <Setter Property="Value" Value="{x:Static icons:IconValues.ArrowDropDown}" />
                </Style>
                <Style Selector="^ icons|UnifiedIcon#SortIcon:not(.IsAscending)">
                    <Setter Property="Value" Value="{x:Static icons:IconValues.ArrowDropUp}" />
                </Style>
            </Style>

            <!-- Everything but the index column as we want to disable styles and not look clickable -->
            <Style Selector="^:not(:nth-child(1))">
                <!-- reset padding -->
                <Setter Property="IsEnabled" Value="False" />
            </Style>

            <Style Selector="^ Button#FakeSortButton">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Padding" Value="0" />

                <Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">
                    <Setter Property="Background"
                            Value="{StaticResource TreeDataGridHeaderBackgroundPointerOverBrush}" />
                    <Setter Property="BorderBrush"
                            Value="{StaticResource TreeDataGridHeaderBorderBrushPointerOverBrush}" />
                </Style>

                <Style Selector="^:pressed /template/ ContentPresenter#PART_ContentPresenter">
                    <Setter Property="Background"
                            Value="{StaticResource TreeDataGridHeaderBackgroundPressedBrush}" />
                    <Setter Property="BorderBrush"
                            Value="{StaticResource TreeDataGridHeaderBorderBrushPressedBrush}" />
                </Style>
            </Style>

        </Style>

        <!-- NOTES:
        - We have a custom template for the TreeDataGridRow so we can add classes based on data.
        - Setting most styling properties on the TreeDataGridRow set the Border#RowBorder element.
        - Some properties have to be set on Border#RowBorder (like BoxShadow) and this element is also used
        to select the data-based classes in the template (like IsActive).
        - The TreeDataGridCellsPresenter#PART_CellsPresenter element is used to set pointerover and selected states and
        is basically a Border layered over the Border#RowBorder. This is how the source TreeDataGrid theme works.        
         -->
        <Style Selector="^ TreeDataGridRow">

            <!-- set custom template, needed so we can add classes based on data -->
            <Setter Property="Template" Value="{DynamicResource LoadOrderItemTreeRowTemplate}" />

            <Setter Property="Opacity" Value="1" />
            <Setter Property="Height" Value="48" />
            <Setter Property="MinHeight" Value="48" />
            <Setter Property="Margin" Value="0,4,0,0" />

            <!-- templated bindings (passed down to Border#RowBorder) -->
            <Setter Property="Background" Value="{StaticResource SurfaceMidBrush}" />
            <Setter Property="BorderBrush" Value="{StaticResource SurfaceTransparentBrush}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="CornerRadius" Value="8" />

            <!-- this can't be bound the same as the above template bindings as TreeDataGridRow doesn't have the property -->
            <Style Selector="^ Border#RowBorder">
                <Setter Property="BoxShadow" Value="{StaticResource DropShadowXS}" />
            </Style>

            <!-- all rows are root row at the moment and we need to override default -->
            <Style Selector="^.RootRow">
                <Setter Property="Background" Value="{StaticResource SurfaceMidBrush}" />
            </Style>

            <!-- is not active -->
            <Style Selector="^ Border#RowBorder:not(.IsActive)">
                <Setter Property="Background" Value="{StaticResource BrandTranslucentDark300Brush}" />
            </Style>

            <!-- first cell  -->
            <Style Selector="^ :is(TreeDataGridCell):nth-child(1) > Border#CellBorder">
                <Setter Property="Padding" Value="0,0,0,0" />
            </Style>

            <!-- STATES -->

            <!-- pointerover -->
            <Style Selector="^:pointerover">

                <!-- Default -->
                <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                    <Setter Property="Background" Value="{StaticResource SurfaceTranslucentLowBrush}" />
                </Style>

                <!-- is not active -->
                <Style Selector="^ Border#RowBorder:not(.IsActive)">
                    <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                        <Setter Property="Background" Value="{StaticResource SurfaceTranslucentLowBrush}" />
                    </Style>
                </Style>
            </Style>

            <!-- selected -->
            <Style Selector="^:selected">

                <!-- Default -->
                <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                    <!-- same background as unselected but if we use the same background it will layer 
                        transparencies and appear darker as the states are on a different element to the row background -->
                    <Setter Property="Background" Value="{x:Null}" />
                    <Setter Property="BorderBrush" Value="{StaticResource StrokeTranslucentModerateBrush}" />
                    <Setter Property="BorderThickness" Value="2" />
                    <Setter Property="CornerRadius" Value="8" />
                </Style>

                <!-- is not active -->
                <Style Selector="^ Border#RowBorder:not(.IsActive)">
                    <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                        <!-- same background as unselected but if we use the same background it will layer 
                        transparencies and appear darker as the states are on a different element to the row background -->
                        <Setter Property="Background" Value="{x:Null}" />
                        <Setter Property="BorderBrush" Value="{StaticResource StrokeTranslucentModerateBrush}" />
                        <Setter Property="BorderThickness" Value="2" />
                        <Setter Property="CornerRadius" Value="8" />
                    </Style>
                </Style>
            </Style>

            <!-- pointerover and selected -->
            <Style Selector="^:selected:pointerover">

                <!-- Default -->
                <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                    <Setter Property="Background" Value="{StaticResource SurfaceTranslucentLowBrush}" />
                </Style>

                <!-- is not active -->
                <Style Selector="^ Border#RowBorder:not(.IsActive)">
                    <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                        <Setter Property="Background" Value="{StaticResource SurfaceTranslucentLowBrush}" />
                    </Style>
                </Style>
            </Style>
        </Style>
    </Style>
</Styles>
