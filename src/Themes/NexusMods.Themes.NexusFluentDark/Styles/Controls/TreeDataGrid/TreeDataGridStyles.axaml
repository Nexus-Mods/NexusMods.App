<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:converters1="clr-namespace:NexusMods.Themes.NexusFluentDark.Converters"
        xmlns:icons="clr-namespace:NexusMods.Icons;assembly=NexusMods.Icons"
        xmlns:files="clr-namespace:NexusMods.App.UI.Controls.Trees.Files;assembly=NexusMods.App.UI"
        xmlns:sorting="clr-namespace:NexusMods.App.UI.Pages.Sorting;assembly=NexusMods.App.UI">

    <Design.PreviewWith>
        <Border Classes="Low" Padding="16">
            <TreeDataGrid Width="400" Height="200" />
        </Border>
    </Design.PreviewWith>

    <Styles.Resources>
        <SolidColorBrush x:Key="TreeDataGridGridLinesBrush" Color="{StaticResource SurfaceTranslucentMid}" Opacity="1" />
        <SolidColorBrush x:Key="TreeDataGridHeaderBackgroundPointerOverBrush"
                         Color="{StaticResource SurfaceTranslucentLow}" Opacity="1" />
        <SolidColorBrush x:Key="TreeDataGridHeaderBackgroundPressedBrush"
                         Color="{StaticResource BrandTranslucentDark300}" Opacity="1" />
        <SolidColorBrush x:Key="TreeDataGridHeaderBorderBrushPointerOverBrush" Color="Transparent" />
        <SolidColorBrush x:Key="TreeDataGridHeaderBorderBrushPressedBrush" Color="Transparent" />
        <SolidColorBrush x:Key="TreeDataGridHeaderForegroundPointerOverBrush" Color="White" />
        <SolidColorBrush x:Key="TreeDataGridHeaderForegroundPressedBrush" Color="White" />
        <SolidColorBrush x:Key="TreeDataGridSelectedCellBackgroundBrush" Color="White" Opacity="0.4" />

        <!-- needs to be a resource and not set by a style so we can add Clasess based on DataContext -->
        <ControlTemplate x:Key="LoadOrderItemTreeRowTemplate"
                         TargetType="TreeDataGridRow"
                         x:DataType="sorting:ILoadOrderItemModel">
            <Border x:Name="RowBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}"
                    Classes.IsActive="{CompiledBinding IsActive}">
                <TreeDataGridCellsPresenter Name="PART_CellsPresenter"
                                            CornerRadius="{TemplateBinding CornerRadius}"
                                            ElementFactory="{TemplateBinding ElementFactory}"
                                            Items="{TemplateBinding Columns}"
                                            Rows="{TemplateBinding Rows}" />
            </Border>
        </ControlTemplate>

        <!-- this template is solely used for the load order index column which can't use built in sort functionality
        as it is disabled when drag and drop is enabled. This is the same template as our default 
        TreeDataGridColumnHeader one with the only change being the addition of a button to switch the sort direction 
        while mimicking the default header styles -->
        <ControlTemplate x:Key="LoadOrderIndexTreeDataGridColumnHeaderTemplate"
                         TargetType="TreeDataGridColumnHeader"
                         x:DataType="sorting:ILoadOrderViewModel">
            <Border Name="DataGridBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                <!-- added button so we can fake a column header click-->
                <Button x:Name="FakeSortButton"
                        Command="{CompiledBinding SwitchSortDirectionCommand }"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch">
                    <DockPanel Name="DataGridDockPanel" VerticalAlignment="Stretch">
                        <Panel DockPanel.Dock="Right"
                               TabIndex="2"
                               IsVisible="False">
                            <Rectangle Fill="{StaticResource TreeDataGridGridLinesBrush}"
                                       HorizontalAlignment="Center"
                                       Width="1"
                                       Height="24"
                                       Margin="0,0,0,0" />
                            <!-- negative margin to bump the vertical line to the right -->
                            <Thumb Name="PART_Resizer"
                                   DockPanel.Dock="Right"
                                   Background="Transparent"
                                   Cursor="SizeWestEast"
                                   IsVisible="{TemplateBinding CanUserResize}"
                                   Width="5">
                                <Thumb.Template>
                                    <ControlTemplate>
                                        <Border Background="{TemplateBinding Background}"
                                                VerticalAlignment="Stretch" />
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </Panel>
                        <Border Padding="{TemplateBinding Padding}">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter Name="PART_ContentPresenter"
                                                  Content="{TemplateBinding Header}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  TabIndex="0">
                                    <ContentPresenter.DataTemplates>
                                        <DataTemplate DataType="x:String">
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="{Binding}" TextTrimming="CharacterEllipsis" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </ContentPresenter.DataTemplates>
                                </ContentPresenter>
                                <Border
                                    Padding="0,0,0,0"
                                    Background="Transparent"
                                    Height="20"
                                    Width="20"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    TabIndex="1">
                                    <icons:UnifiedIcon Name="SortIcon"
                                                       Foreground="{TemplateBinding Foreground}"
                                                       Value="{x:Null}"
                                                       Classes.IsAscending="{CompiledBinding IsAscending}" />
                                </Border>
                            </StackPanel>
                        </Border>
                    </DockPanel>
                </Button>
            </Border>
        </ControlTemplate>

        <!-- if we have this control theme here, we can override styles properly -->
        <ControlTheme x:Key="TreeDataGridExpandCollapseChevron" TargetType="ToggleButton">
            <Setter Property="Margin" Value="0" />
            <Setter Property="Width" Value="24" />
            <Setter Property="Height" Value="24" />
            <Setter Property="Foreground" Value="{StaticResource NeutralSubduedBrush}" />
            <Setter Property="Template">
                <ControlTemplate>
                    <Border Background="Transparent"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            CornerRadius="{StaticResource Rounded}">
                        <!-- swapped out Path so we can use our UnifiedIcon -->
                        <icons:UnifiedIcon x:Name="ChevronIcon"
                                           Value="{x:Static icons:IconValues.ChevronRight}"
                                           Foreground="{TemplateBinding Foreground}" />
                    </Border>
                </ControlTemplate>
            </Setter>
            <Style Selector="^:checked /template/ icons|UnifiedIcon#ChevronIcon">
                <Setter Property="Value" Value="{x:Static icons:IconValues.ChevronDown}" />
            </Style>

            <Style Selector="^:pointerover">
                <Style Selector="^ /template/ Border">
                    <Setter Property="Background" Value="{StaticResource SurfaceTranslucentMidBrush}" />
                </Style>

                <Style Selector="^ /template/ icons|UnifiedIcon#ChevronIcon">
                    <Setter Property="Foreground" Value="{StaticResource NeutralStrongBrush}" />
                </Style>
            </Style>

        </ControlTheme>
    </Styles.Resources>


    <!-- TreeDataGrid -->

    <Style Selector="TreeDataGrid">
        <Setter Property="Background" Value="{StaticResource BrandTranslucentDark300Brush}" />
        <Setter Property="BorderThickness" Value="0" />

        <Style Selector="^ TextBlock">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Theme" Value="{StaticResource BodyMDNormalTheme}" />
        </Style>

        <Style Selector="^ /template/ Border#ColumnHeadersPresenterBorder">
            <Setter Property="Background" Value="{StaticResource SurfaceLowBrush}" />
            <Setter Property="Height" Value="36" />
            <Setter Property="BorderBrush" Value="{StaticResource StrokeTranslucentWeakBrush}" />
        </Style>

        <!-- NOTE (insomnious): I think it makes sense to go with 'Compact' class at the parent TreeDataGrid level
        so that we can keep the styles here in a single place to change what we need -->

        <Style Selector="^.Compact">
            <Style Selector="^ TreeDataGridRow">
                <Setter Property="Height" Value="32" />
                <Style Selector="^ ToggleButton">
                    <Setter Property="Width" Value="20" />
                    <Setter Property="Height" Value="20" />
                    <Style Selector="^ /template/ icons|UnifiedIcon#ChevronIcon">
                        <Setter Property="Size" Value="20" />
                    </Style>
                </Style>
            </Style>
        </Style>
    </Style>

    <!-- No backgrounds for the advanced installer TreeDataGrid's -->

    <Style
        Selector="TreeDataGrid#SelectTreeDataGrid, 
        TreeDataGrid#ModContentTreeDataGrid, 
        TreeDataGrid#LocationPreviewTreeDataGrid">
        <Setter Property="Background" Value="{x:Null}" />
    </Style>

    <!-- TreeDataGridColumnHeader -->

    <Style Selector="TreeDataGridColumnHeader">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="Padding" Value="8,0,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{StaticResource NeutralSubduedBrush}" />
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border Name="DataGridBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                    <DockPanel Name="DataGridDockPanel" VerticalAlignment="Stretch">
                        <Panel DockPanel.Dock="Right"
                               TabIndex="2">
                            <Rectangle Fill="{StaticResource TreeDataGridGridLinesBrush}"
                                       HorizontalAlignment="Center"
                                       Width="1"
                                       Height="24"
                                       Margin="0,0,-6,0" />
                            <!-- negative margin to bump the vertical line to the right -->
                            <Thumb Name="PART_Resizer"
                                   DockPanel.Dock="Right"
                                   Background="Transparent"
                                   Cursor="SizeWestEast"
                                   IsVisible="{TemplateBinding CanUserResize}"
                                   Width="5">
                                <Thumb.Template>
                                    <ControlTemplate>
                                        <Border Background="{TemplateBinding Background}"
                                                VerticalAlignment="Stretch" />
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </Panel>
                        <!-- added this border so we can use padding on the below StackPanel -->
                        <Border Padding="{TemplateBinding Padding}">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter Name="PART_ContentPresenter"
                                                  Content="{TemplateBinding Header}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  TabIndex="0">
                                    <ContentPresenter.DataTemplates>
                                        <DataTemplate DataType="x:String">
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="{Binding}" TextTrimming="CharacterEllipsis" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </ContentPresenter.DataTemplates>
                                </ContentPresenter>
                                <Border
                                    Padding="0,0,0,0"
                                    Background="Transparent"
                                    Height="20"
                                    Width="20"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    TabIndex="1">
                                    <!-- swapped out Path so we can use our UnifiedIcon -->
                                    <icons:UnifiedIcon Name="SortIcon"
                                                       Value="{x:Null}"
                                                       Foreground="{TemplateBinding Foreground}" />
                                </Border>
                            </StackPanel>
                        </Border>
                    </DockPanel>
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^ TextBlock">
            <Setter Property="Foreground" Value="{StaticResource NeutralSubduedBrush}" />
            <Setter Property="Theme" Value="{StaticResource TitleXSSemiTheme}" />
        </Style>

        <!-- Sort Icon replacements now that we aren't using Path -->
        <Style Selector="^[SortDirection=Ascending] /template/ icons|UnifiedIcon#SortIcon">
            <Setter Property="Value" Value="{x:Static icons:IconValues.ArrowDropDown}" />
        </Style>
        <Style Selector="^[SortDirection=Descending] /template/ icons|UnifiedIcon#SortIcon">
            <Setter Property="Value" Value="{x:Static icons:IconValues.ArrowDropUp}" />
        </Style>

        <!-- First column header -->
        <Style Selector="^:nth-child(1)">
            <!-- increased left padding to fit with main tree items -->
            <Setter Property="Padding" Value="24,0,0,0" />
        </Style>

        <!-- last column header -->
        <Style Selector="^:nth-last-child(1)">
            <!-- <Style Selector="^ /template/ DockPanel#DataGridDockPanel"> -->
            <!--     <Setter Property="HorizontalAlignment" Value="Right" /> -->
            <!-- </Style> -->
        </Style>
    </Style>


    <!-- TreeDataGridRow -->

    <Style Selector="TreeDataGridRow">

        <Setter Property="Height" Value="52" />
        <Setter Property="ClipToBounds" Value="False" />

        <!-- needed to override the default coloring of this element -->
        <Style Selector="^:selected /template/ TreeDataGridCellsPresenter#PART_CellsPresenter">
            <Setter Property="Background" Value="{x:Null}" />
        </Style>

        <!-- all cells -->
        <Style Selector="^ :is(TreeDataGridCell)">
            <Setter Property="Padding" Value="8,0" />

            <Style Selector="^ Border#CellBorder > TextBlock">
                <Setter Property="Foreground" Value="{StaticResource NeutralSubduedBrush}" />
            </Style>
        </Style>

        <!-- first cell  -->
        <Style Selector="^ :is(TreeDataGridCell):nth-child(1)">
            <Setter Property="Padding" Value="12,0,0,0" />

            <Style Selector="^ Border#CellBorder > TextBlock">
                <Setter Property="Foreground" Value="{StaticResource NeutralModerateBrush}" />
            </Style>

            <Style Selector="^ files|FileTreeNodeView /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Foreground" Value="{StaticResource NeutralModerateBrush}" />
            </Style>
        </Style>

        <!-- last cell -->
        <Style Selector="^ :is(TreeDataGridCell):nth-last-child(1):not(:nth-child(1))">

            <Setter Property="Padding" Value="8,0,26,0" />

            <Style Selector="^ ContentPresenter#PART_ContentPresenter">

                <!-- TODO (insomnious): this will be replaced when we have our button component ready to go -->
                <!-- for now we're just using overriding the button style so we don't have to change implementation -->

                <Style Selector="^ Button">
                    <Setter Property="Height" Value="28" />

                    <Style Selector="^.Standard.Tertiary">
                        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
                            <Setter Property="Foreground" Value="{StaticResource NeutralSubduedBrush}" />
                            <Setter Property="Opacity" Value="1" />
                        </Style>
                    </Style>
                </Style>
            </Style>
        </Style>


        <!-- NOTE(insomnious): as per design request, the background of the rows stay as they are with the
         :pointerover and :selected styles applied to the child 'PART_CellsPresenter' element. This is to allow
         for layering translucent colours. -->

        <!-- Root rows styling -->

        <!-- "RootRow" is a class that was manually added to the TreeDataGridRow that have indent level 0. -->
        <!-- See `NexusMods.App.UI.Controls.CustomElementFactory.cs` for more information. -->
        <Style Selector="^.RootRow">
            <Setter Property="Background" Value="{StaticResource SurfaceLowBrush}" />
        </Style>

        <!-- Child rows styling -->
        <Style Selector="^:not(.RootRow)">
            <Setter Property="Background" Value="{StaticResource SurfaceTransparentBrush}" />
        </Style>

        <!-- All rows hover styling -->
        <Style Selector="^:pointerover /template/ TreeDataGridCellsPresenter#PART_CellsPresenter">
            <Setter Property="Background" Value="{StaticResource SurfaceTranslucentLowBrush}" />
        </Style>

        <!-- All rows selection styling -->
        <Style Selector="^:selected /template/ TreeDataGridCellsPresenter#PART_CellsPresenter">
            <Setter Property="Background" Value="{StaticResource SurfaceTranslucentMidBrush}" />
        </Style>

    </Style>

    <!-- TreeDataGridTemplateCell -->

    <Style Selector="TreeDataGridTemplateCell">
        <Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter > TextBlock">
            <Setter Property="Foreground" Value="{StaticResource NeutralSubduedBrush}" />
        </Style>
        
        <Style Selector="^.LibraryItemNameColumn">
            <Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">

                <Style Selector="^ StackPanel#LibraryItemWithThumbnailAndNameStack">
                    <Setter Property="Orientation" Value="Horizontal" />
                    <Setter Property="Spacing" Value="{StaticResource Spacing-3}" />
                        
                    <Style Selector="^ Border#LibraryItemThumbnailBorder">
                        <Setter Property="Background" Value="{StaticResource SurfaceTranslucentMidBrush}" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="CornerRadius" Value="{StaticResource Rounded}" />
                        <Setter Property="Width" Value="45" />
                        <Setter Property="Height" Value="28" />
                        <!-- easy way to get the rounded corner to mask the image below -->
                        <Setter Property="ClipToBounds" Value="True" />
                        
                        <Style Selector="^ > Panel > icons|UnifiedIcon">
                            <Setter Property="Foreground" Value="{StaticResource NeutralSubduedBrush}" />
                            <Setter Property="Size" Value="16" />
                        </Style>
                        
                        <Style Selector="^ > Panel > Image">
                            <Setter Property="Stretch" Value="UniformToFill" />
                        </Style>
                    </Style>
                </Style>
                    
            </Style>
        </Style>
        
    </Style>


    <!-- TreeDataGridExpanderCell -->

    <Style Selector="TreeDataGridExpanderCell">

        <!-- Override padding since this is a wrapper cell -->
        <Setter Property="Padding" Value="0,0,0,0" />

        <!-- Update the padding converter on the Border inside the TreeDataGridExpanderCell template -->
        <!-- Rest is copied from the default style: -->
        <!-- https://github.com/AvaloniaUI/Avalonia.Controls.TreeDataGrid/blob/38dce086b6c06503ab29bf824063f6fd113ea309/src/Avalonia.Controls.TreeDataGrid/Themes/Generic.axaml#L226-L245 -->
        <Setter Property="Template">
            <ControlTemplate>
                <Border x:Name="CellBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        Padding="{TemplateBinding Indent, Converter={x:Static converters1:TreeDataGridIndentToPaddingConverter.Instance}}">
                    <!-- This is to adjust the left padding based on the indent level of the row. -->

                    <DockPanel>
                        <!-- Indent line element -->
                        <Border DockPanel.Dock="Left"
                                Width="20"
                                IsVisible="{TemplateBinding Indent, Converter={x:Static converters1:TreeDataGridIndentToBoolConverter.Instance}}">
                            <!-- This is to hide the indent line when the row is not indented. -->
                            <Border HorizontalAlignment="Center"
                                    Width="2"
                                    Background="{StaticResource SurfaceTranslucentMidBrush}" />
                        </Border>

                        <DockPanel>
                            <Border DockPanel.Dock="Left"
                                    Margin="0">
                                <ToggleButton Theme="{StaticResource TreeDataGridExpandCollapseChevron}"
                                              Focusable="False"
                                              IsChecked="{TemplateBinding IsExpanded, Mode=TwoWay}"
                                              IsVisible="{TemplateBinding ShowExpander}" />

                            </Border>
                            <Decorator Name="PART_Content" />
                        </DockPanel>
                    </DockPanel>
                </Border>
            </ControlTemplate>
        </Setter>

        <!-- Nested cell padding -->
        <Style Selector="^ Border#CellBorder :is(TreeDataGridCell)">
            <!-- This goes from after the expander to the end of the cell, but parent cell padding is also applied. -->
            <Setter Property="Padding" Value="4,0,0,0" />
        </Style>
    </Style>

    <Style Selector="TreeDataGrid#ModFilesTreeDataGrid">
        <Style Selector="^ icons|UnifiedIcon">
            <Setter Property="Foreground" Value="{StaticResource NeutralModerateBrush}" />
        </Style>
    </Style>

    <!-- SORT \ LOAD ORDER TREEDATAGRID -->

    <Style Selector="TreeDataGrid#SortOrderTreeDataGrid">

        <!-- main background -->
        <Setter Property="Background" Value="{x:Null}" />

        <!-- header background -->
        <Style Selector="^ /template/ Border#ColumnHeadersPresenterBorder">
            <Setter Property="Background" Value="{StaticResource SurfaceTransparentBrush}" />
            <Setter Property="BorderThickness" Value="0" />
            <!-- 4px left and right to line up header with rows below -->
            <Setter Property="Padding" Value="4,0" />
        </Style>

        <Style Selector="^ /template/ TreeDataGridRowsPresenter#PART_RowsPresenter">
            <!-- 4px left and right to account for rows needing to show shadows -->
            <Setter Property="Margin" Value="4,0,8,0" />
        </Style>

        <Style Selector="^ TreeDataGridColumnHeader">

            <!-- Index column header -->
            <!-- TODO: change this selector to always get the index column even if it isn't the first one -->
            <Style Selector="^:nth-child(1)">
                <!-- reset padding -->
                <Setter Property="Padding" Value="8,0,0,0" />
                <Setter Property="Template" Value="{DynamicResource LoadOrderIndexTreeDataGridColumnHeaderTemplate}" />

                <Style Selector="^ icons|UnifiedIcon#SortIcon.IsAscending">
                    <Setter Property="Value" Value="{x:Static icons:IconValues.ArrowDropDown}" />
                </Style>
                <Style Selector="^ icons|UnifiedIcon#SortIcon:not(.IsAscending)">
                    <Setter Property="Value" Value="{x:Static icons:IconValues.ArrowDropUp}" />
                </Style>
            </Style>

            <!-- Everything but the index column as we want to disable styles and not look clickable -->
            <Style Selector="^:not(:nth-child(1))">
                <!-- reset padding -->
                <Setter Property="IsEnabled" Value="False" />
            </Style>

            <Style Selector="^ Button#FakeSortButton">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Padding" Value="0" />

                <Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">
                    <Setter Property="Background"
                            Value="{StaticResource TreeDataGridHeaderBackgroundPointerOverBrush}" />
                    <Setter Property="BorderBrush"
                            Value="{StaticResource TreeDataGridHeaderBorderBrushPointerOverBrush}" />
                </Style>

                <Style Selector="^:pressed /template/ ContentPresenter#PART_ContentPresenter">
                    <Setter Property="Background"
                            Value="{StaticResource TreeDataGridHeaderBackgroundPressedBrush}" />
                    <Setter Property="BorderBrush"
                            Value="{StaticResource TreeDataGridHeaderBorderBrushPressedBrush}" />
                </Style>
            </Style>

        </Style>

        <!-- NOTES:
        - We have a custom template for the TreeDataGridRow so we can add classes based on data.
        - Setting most styling properties on the TreeDataGridRow set the Border#RowBorder element.
        - Some properties have to be set on Border#RowBorder (like BoxShadow) and this element is also used
        to select the data-based classes in the template (like IsActive).
        - The TreeDataGridCellsPresenter#PART_CellsPresenter element is used to set pointerover and selected states and
        is basically a Border layered over the Border#RowBorder. This is how the source TreeDataGrid theme works.        
         -->
        <Style Selector="^ TreeDataGridRow">

            <!-- set custom template, needed so we can add classes based on data -->
            <Setter Property="Template" Value="{DynamicResource LoadOrderItemTreeRowTemplate}" />

            <Setter Property="Opacity" Value="1" />
            <Setter Property="Height" Value="62" />
            <Setter Property="MinHeight" Value="62" />
            <Setter Property="Margin" Value="0,8,0,0" />

            <!-- templated bindings (passed down to Border#RowBorder) -->
            <Setter Property="Background" Value="{StaticResource SurfaceMidBrush}" />
            <Setter Property="BorderBrush" Value="{StaticResource SurfaceTransparentBrush}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="CornerRadius" Value="8" />

            <!-- this can't be bound the same as the above template bindings as TreeDataGridRow doesn't have the property -->
            <Style Selector="^ Border#RowBorder">
                <Setter Property="BoxShadow" Value="{StaticResource DropShadowXS}" />
            </Style>

            <!-- all rows are root row at the moment and we need to override default -->
            <Style Selector="^.RootRow">
                <Setter Property="Background" Value="{StaticResource SurfaceMidBrush}" />
            </Style>

            <!-- is not active -->
            <Style Selector="^ Border#RowBorder:not(.IsActive)">
                <Setter Property="Background" Value="{StaticResource BrandTranslucentDark300Brush}" />
            </Style>

            <!-- STATES -->

            <!-- pointerover -->
            <Style Selector="^:pointerover">

                <!-- Default -->
                <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                    <Setter Property="Background" Value="{StaticResource SurfaceTranslucentLowBrush}" />
                </Style>

                <!-- is not active -->
                <Style Selector="^ Border#RowBorder:not(.IsActive)">
                    <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                        <Setter Property="Background" Value="{StaticResource SurfaceTranslucentLowBrush}" />
                    </Style>
                </Style>
            </Style>

            <!-- selected -->
            <Style Selector="^:selected">

                <!-- Default -->
                <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                    <!-- same background as unselected but if we use the same background it will layer 
                        transparencies and appear darker as the states are on a different element to the row background -->
                    <Setter Property="Background" Value="{x:Null}" />
                    <Setter Property="BorderBrush" Value="{StaticResource StrokeTranslucentModerateBrush}" />
                    <Setter Property="BorderThickness" Value="2" />
                    <Setter Property="CornerRadius" Value="8" />
                </Style>

                <!-- is not active -->
                <Style Selector="^ Border#RowBorder:not(.IsActive)">
                    <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                        <!-- same background as unselected but if we use the same background it will layer 
                        transparencies and appear darker as the states are on a different element to the row background -->
                        <Setter Property="Background" Value="{x:Null}" />
                        <Setter Property="BorderBrush" Value="{StaticResource StrokeTranslucentModerateBrush}" />
                        <Setter Property="BorderThickness" Value="2" />
                        <Setter Property="CornerRadius" Value="8" />
                    </Style>
                </Style>
            </Style>

            <!-- pointerover and selected -->
            <Style Selector="^:selected:pointerover">

                <!-- Default -->
                <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                    <Setter Property="Background" Value="{StaticResource SurfaceTranslucentLowBrush}" />
                </Style>

                <!-- is not active -->
                <Style Selector="^ Border#RowBorder:not(.IsActive)">
                    <Style Selector="^ TreeDataGridCellsPresenter#PART_CellsPresenter">
                        <Setter Property="Background" Value="{StaticResource SurfaceTranslucentLowBrush}" />
                    </Style>
                </Style>
            </Style>
        </Style>
    </Style>
</Styles>
