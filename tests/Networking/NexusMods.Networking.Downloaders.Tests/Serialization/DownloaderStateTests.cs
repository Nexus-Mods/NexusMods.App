using AutoFixture.Xunit2;
using FluentAssertions;
using MemoryPack;
using Moq;
using NexusMods.Networking.Downloaders.Interfaces;
using NexusMods.Networking.Downloaders.Interfaces.Traits;
using NexusMods.Networking.Downloaders.Tasks.State;

namespace NexusMods.Networking.Downloaders.Tests.Serialization;

public class DownloaderStateTests
{
    /// <summary>
    /// Tests serialization of just the base (required) members.
    /// </summary>
    [Theory]
    [AutoData]
    public void SerializeBase(string friendlyName, string downloadPath, int state)
    {
        // Arrange
        var mainInterface = new Mock<IDownloadTask>();
        mainInterface.Setup(x => x.FriendlyName).Returns(friendlyName);
        
        // Act
        var item = DownloaderState<MockDownloaderState>.Create(mainInterface.Object, new MockDownloaderState()
        {
            Id = state
        }, downloadPath);

        var serialized = DownloaderState<MockDownloaderState>.Serialize(item);
        var deserialized = DownloaderState<MockDownloaderState>.Deserialize(serialized);
        
        // Assert
        deserialized.Should().Be(item);
    }
    
    [Theory]
    [AutoData]
    public void SerializeWithGameName(string friendlyName, string downloadPath, int state, string gameName)
    {
        // Arrange
        var mainInterface = new Mock<IDownloadTask>();
        mainInterface.Setup(x => x.FriendlyName).Returns(friendlyName);

        var gameNameInterface = mainInterface.As<IHaveGameName>();
        gameNameInterface.Setup(x => x.GameName).Returns(gameName);

        // Act
        var item = DownloaderState<MockDownloaderState>.Create(mainInterface.Object, new MockDownloaderState()
        {
            Id = state
        }, downloadPath);
        var serialized = DownloaderState<MockDownloaderState>.Serialize(item);

        var deserialized = DownloaderState<MockDownloaderState>.Deserialize(serialized);
    
        // Assert
        deserialized.Should().Be(item);
    }
    
    [Theory]
    [AutoData]
    public void SerializeWithDownloadVersion(string friendlyName, string downloadPath, int state, string version)
    {
        // Arrange
        var mainInterface = new Mock<IDownloadTask>();
        mainInterface.Setup(x => x.FriendlyName).Returns(friendlyName);

        var downloadVersionInterface = mainInterface.As<IHaveDownloadVersion>();
        downloadVersionInterface.Setup(x => x.Version).Returns(version);

        // Act
        var item = DownloaderState<MockDownloaderState>.Create(mainInterface.Object, new MockDownloaderState()
        {
            Id = state
        }, downloadPath);
        var serialized = DownloaderState<MockDownloaderState>.Serialize(item);

        var deserialized = DownloaderState<MockDownloaderState>.Deserialize(serialized);
    
        // Assert
        deserialized.Should().Be(item);
    }

    [Theory]
    [AutoData]
    public void SerializeWithFileSize(string friendlyName, string downloadPath, int state, long sizeBytes)
    {
        // Arrange
        var mainInterface = new Mock<IDownloadTask>();
        mainInterface.Setup(x => x.FriendlyName).Returns(friendlyName);

        var fileSizeInterface = mainInterface.As<IHaveFileSize>();
        fileSizeInterface.Setup(x => x.SizeBytes).Returns(sizeBytes);

        // Act
        var item = DownloaderState<MockDownloaderState>.Create(mainInterface.Object, new MockDownloaderState()
        {
            Id = state
        }, downloadPath);
        var serialized = DownloaderState<MockDownloaderState>.Serialize(item);

        var deserialized = DownloaderState<MockDownloaderState>.Deserialize(serialized);
    
        // Assert
        deserialized.Should().Be(item);
    }
}

[MemoryPackable(GenerateType.VersionTolerant)]
// ReSharper disable once PartialTypeWithSinglePart
public partial class MockDownloaderState
{
    [MemoryPackOrder(0)]
    public int Id { get; set; } = 1337;
    
    #region Autogenerated
    protected bool Equals(MockDownloaderState other) => Id == other.Id;

    public override bool Equals(object? obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != this.GetType()) return false;
        return Equals((MockDownloaderState)obj);
    }

    public override int GetHashCode() => Id;
    #endregion
}