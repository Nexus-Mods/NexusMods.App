name: Clean Environment Tests

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/clean_environment_tests.yaml"
      - "src/**"
      - "tests/**"
      - "**.props"
      - "**.targets"
  pull_request:
    branches: [ main ]
    paths:
      - ".github/workflows/clean_environment_tests.yaml"
      - "src/**"
      - "tests/**"
      - "**.props"
      - "**.targets"
    types: [ opened, synchronize, reopened, ready_for_review ]

jobs:
  draft:
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == true
    runs-on: ubuntu-latest
    steps:
      - name: Fails because it's a draft PR
        run: exit 1

  build-and-test:
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - name: Free Disk Space (Ubuntu)
        if: runner.os == 'Linux'
        uses: jlumbroso/free-disk-space@main

      - uses: actions/checkout@v3
        with:
          submodules: recursive
          lfs: true

      - name: Setup .NET 9.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Print debug info
        run: dotnet --info

      - name: Install dependencies
        run: dotnet restore NexusMods.App.sln

      - name: Build
        run: dotnet build NexusMods.App.sln --configuration Release --no-restore

      - name: Test (exclude Integration projects)
        shell: pwsh
        env:
          VSTEST_TESTHOST_SHUTDOWN_TIMEOUT: 60000
        run: |
          $ErrorActionPreference = 'Stop'
          $testProjects = Get-ChildItem -Recurse -Path "tests" -Filter *.csproj |
            Where-Object { $_.FullName -match '\\.Tests\\.csproj$' -and $_.FullName -notmatch 'Integration' }
          if (-not $testProjects) {
            Write-Host "No matching test projects found (excluding *Integration*)."
            exit 0
          }
          foreach ($proj in $testProjects) {
            Write-Host "Running tests for: $($proj.FullName)"
            dotnet test $proj.FullName --configuration Release --no-build --verbosity normal `
              --filter "RequiresNetworking!=True&FlakeyTest!=True" `
              --logger "GitHubActions" `
              --blame-hang-timeout 20m
            if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          }
